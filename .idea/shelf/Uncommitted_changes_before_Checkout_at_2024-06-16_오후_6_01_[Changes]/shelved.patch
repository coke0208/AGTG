Index: app/src/main/java/com/example/test/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.test\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.SearchView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.test.databinding.ActivityMainBinding\r\nimport android.Manifest\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport android.view.MotionEvent\r\nimport android.view.animation.Animation\r\nimport android.view.animation.AnimationUtils\r\nimport android.widget.Button\r\nimport android.widget.CheckBox\r\nimport android.widget.ImageButton\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.work.ExistingPeriodicWorkPolicy\r\nimport androidx.work.OneTimeWorkRequestBuilder\r\nimport androidx.work.PeriodicWorkRequestBuilder\r\nimport androidx.work.WorkManager\r\n//import com.example.test.productinfo.ProductDB\r\nimport com.example.test.productutils.ProductAdapter\r\nimport com.google.firebase.FirebaseApp\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityMainBinding\r\n    private lateinit var homeFragment: HomeFragment\r\n    //private lateinit var adapter: ProductAdapter\r\n\r\n    companion object {\r\n        private const val REQUEST_NOTIFICATION_PERMISSION = 1\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        val pref = getSharedPreferences(\"token\", Context.MODE_PRIVATE)\r\n        val token = pref.getString(\"token\", \"\")\r\n\r\n        // 로그로 토큰 출력\r\n        Log.i(\"!!!!!!!!\", token ?: \"Token not found\")\r\n\r\n\r\n        homeFragment = HomeFragment()\r\n        supportFragmentManager.beginTransaction().replace(R.id.frameLayout, homeFragment).commit()\r\n\r\n        setOnQueryTextListener()\r\n\r\n        scheduleExpiryCheckWork()\r\n\r\n        val mypage = Intent(this, MypageActivity::class.java)\r\n        binding.mypage.setOnClickListener { startActivity(mypage) }\r\n\r\n        val upload = Intent(this, UploadActivity::class.java)\r\n        binding.upload.setOnClickListener { startActivity(upload) }\r\n\r\n        val group = Intent(this, GroupActivity::class.java)\r\n        binding.group.setOnClickListener { startActivity(group) }\r\n\r\n        val product1 = Intent(this, ProductActivity::class.java)\r\n        binding.add.setOnClickListener { startActivity(product1) }\r\n\r\n        FirebaseApp.initializeApp(this)\r\n\r\n    }\r\n\r\n\r\n    private fun setOnQueryTextListener() {\r\n        binding.search.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n                binding.search.clearFocus()\r\n                return false\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                updateItemCurrentFragment(newText)\r\n                return false\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun updateItemCurrentFragment(newText: String?) {\r\n        val fragments = (homeFragment.childFragmentManager.fragments)\r\n        fragments.forEach { fragment ->\r\n            if (fragment is HomeFragment.SearchableFragment) {\r\n                fragment.updateSearchQuery(newText ?: \"\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun scheduleExpiryCheckWork() {\r\n        val periodicWorkRequest = PeriodicWorkRequestBuilder<ExpiryCheckWorker>(1, TimeUnit.DAYS)\r\n            .setInitialDelay(1, TimeUnit.MINUTES) // 처음 1분 후 실행\r\n            .build()\r\n\r\n        val oneTimeWorkRequest = OneTimeWorkRequestBuilder<ExpiryCheckWorker>().build()\r\n\r\n        WorkManager.getInstance(this).enqueueUniquePeriodicWork(\r\n            \"expiryCheckWork\",\r\n            ExistingPeriodicWorkPolicy.REPLACE,\r\n            periodicWorkRequest\r\n        )\r\n\r\n        WorkManager.getInstance(this).enqueue(oneTimeWorkRequest)\r\n    }\r\n\r\n\r\n\r\n    override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {\r\n        if (currentFocus != null) {\r\n            val outRect = android.graphics.Rect()\r\n            currentFocus?.getGlobalVisibleRect(outRect)\r\n            if (!outRect.contains(ev?.rawX?.toInt() ?: 0, ev?.rawY?.toInt() ?: 0)) {\r\n                currentFocus?.clearFocus()\r\n                binding.search.clearFocus()\r\n            }\r\n        }\r\n        return super.dispatchTouchEvent(ev)\r\n    }\r\n\r\n    var pressedTime: Long = 0\r\n\r\n    @SuppressLint(\"MissingSuperCall\")\r\n    override fun onBackPressed() {\r\n        if (System.currentTimeMillis() - pressedTime <= 2000) {\r\n            finish()\r\n        } else {\r\n            pressedTime = System.currentTimeMillis()\r\n            Toast.makeText(this, \"한 번 더 누르면 종료됩니다.\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/test/MainActivity.kt b/app/src/main/java/com/example/test/MainActivity.kt
--- a/app/src/main/java/com/example/test/MainActivity.kt	
+++ b/app/src/main/java/com/example/test/MainActivity.kt	
@@ -104,7 +104,7 @@
 
     private fun scheduleExpiryCheckWork() {
         val periodicWorkRequest = PeriodicWorkRequestBuilder<ExpiryCheckWorker>(1, TimeUnit.DAYS)
-            .setInitialDelay(1, TimeUnit.MINUTES) // 처음 1분 후 실행
+            .setInitialDelay(30, TimeUnit.SECONDS) // 처음 1분 후 실행 //30초
             .build()
 
         val oneTimeWorkRequest = OneTimeWorkRequestBuilder<ExpiryCheckWorker>().build()
